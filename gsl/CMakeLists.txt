project(
		gal-script-lang
		LANGUAGES CXX
)

set(
	${PROJECT_NAME}_CORE_SOURCE

	src/core/core_detail/line_info.cpp
	src/core/core_detail/file_info.cpp
	src/core/core_detail/file_accessor.cpp

	src/core/runtime_info.cpp
	src/core/module_file_accessor.cpp
)

set(
	${PROJECT_NAME}_UTILS_SOURCE


)

set(
	${PROJECT_NAME}_BOOST_SOURCE

	
)

add_library(
	${PROJECT_NAME}
	# todo
	STATIC

	${${PROJECT_NAME}_CORE_SOURCE}
	${${PROJECT_NAME}_UTILS_SOURCE}
	${${PROJECT_NAME}_BOOST_SOURCE}
)

target_include_directories(
	${PROJECT_NAME}
	PUBLIC 

	${CMAKE_CURRENT_SOURCE_DIR}/include
)

add_library(
	gal::GSL
	ALIAS
	${PROJECT_NAME}
)

target_compile_definitions(
	${PROJECT_NAME}
	PUBLIC 

	${PROJECT_NAME_PREFIX}MAJOR_VERSION=${${PROJECT_NAME_PREFIX}MAJOR_VERSION}
	${PROJECT_NAME_PREFIX}MINOR_VERSION=${${PROJECT_NAME_PREFIX}MINOR_VERSION}
	${PROJECT_NAME_PREFIX}PATCH_VERSION=${${PROJECT_NAME_PREFIX}PATCH_VERSION}
	${PROJECT_NAME_PREFIX}VERSION="${${PROJECT_NAME_PREFIX}VERSION}"
	${PROJECT_NAME_PREFIX}COMPILER_NAME="${${PROJECT_NAME_PREFIX}COMPILER_NAME}"
	${PROJECT_NAME_PREFIX}COMPILER_VERSION="${${PROJECT_NAME_PREFIX}COMPILER_VERSION}"
	${PROJECT_NAME_PREFIX}COMPILER_HAS_META=${${PROJECT_NAME_PREFIX}COMPILER_HAS_META}

	$<$<CXX_COMPILER_ID:MSVC>:${PROJECT_NAME_PREFIX}COMPILER_MSVC>
	$<$<CXX_COMPILER_ID:GNU>:${PROJECT_NAME_PREFIX}COMPILER_GNU>
	# clang-cl
	# Also defines MSVC
	$<$<AND:$<CXX_COMPILER_ID:Clang>,$<STREQUAL:"${CMAKE_CXX_SIMULATE_ID}","MSVC">>:${PROJECT_NAME_PREFIX}COMPILER_CLANG_CL ${PROJECT_NAME_PREFIX}COMPILER_MSVC>
	# clang
	$<$<AND:$<CXX_COMPILER_ID:Clang>,$<NOT:$<STREQUAL:"${CMAKE_CXX_SIMULATE_ID}","MSVC">>>:${PROJECT_NAME_PREFIX}COMPILER_CLANG>
	# TODO: MORE COMPILERS HERE.
)

set(CMAKE_CXX_STANDARD 23)
set_compile_options_private(${PROJECT_NAME})

include(${${PROJECT_NAME_PREFIX}CMAKE_3RDPARTY_PATH}/eve.cmake)
include(${${PROJECT_NAME_PREFIX}CMAKE_3RDPARTY_PATH}/foonathan-memory.cmake)
include(${${PROJECT_NAME_PREFIX}CMAKE_3RDPARTY_PATH}/spdlog.cmake)
include(${${PROJECT_NAME_PREFIX}CMAKE_3RDPARTY_PATH}/fmtlib.cmake)

target_compile_definitions(
	${PROJECT_NAME}
	PUBLIC

	SPDLOG_FMT_EXTERNAL
)

target_link_libraries(
	${PROJECT_NAME}
	PUBLIC

	eve::eve
	foonathan_memory
	fmt::fmt
	# spdlog
	spdlog_header_only
)
